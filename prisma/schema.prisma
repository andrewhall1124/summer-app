// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model SwimLane {
  id        String   @id @default(cuid())
  name      String
  order     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folders   Folder[]

  @@unique([userId, order])
  @@map("swim_lanes")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  order       Int
  swimLaneId  String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  swimLane    SwimLane @relation(fields: [swimLaneId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@unique([swimLaneId, order])
  @@map("folders")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean    @default(false)
  order       Int
  folderId    String
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  folder      Folder     @relation(fields: [folderId], references: [id], onDelete: Cascade)
  tags        TaskTag[]

  @@unique([folderId, order])
  @@map("tasks")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?
  userId    String
  createdAt DateTime @default(now())

  tasks     TaskTag[]

  @@unique([userId, name])
  @@map("tags")
}

model TaskTag {
  taskId String
  tagId  String

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}
